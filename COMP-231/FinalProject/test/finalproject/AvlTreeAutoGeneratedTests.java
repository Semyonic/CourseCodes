/*
 * 
            
 * The MIT License
 * Copyright 2014 Semih Onay <semih.onay@bilgiedu.net>.
 *
 *
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package finalproject;

import org.junit.After;
import org.junit.AfterClass;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

/**
 *
 * @author Semih Onay - 11176008 <semih.onay@bilgiedu.net>
 */
public class AvlTreeAutoGeneratedTests {
    
    public AvlTreeAutoGeneratedTests() {
    }
    
    @BeforeClass
    public static void setUpClass() {
    }
    
    @AfterClass
    public static void tearDownClass() {
    }
    
    @Before
    public void setUp() {
    }
    
    @After
    public void tearDown() {
    }

    /**
     * Test of getNode method, of class AvlTree.
     */
    @Test
    public void testGetNode() {
        System.out.println("getNode");
        AvlTree instance = new AvlTree();
        AvlNode expResult = null;
        AvlNode result = instance.getNode();
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of setNode method, of class AvlTree.
     */
    @Test
    public void testSetNode() {
        System.out.println("setNode");
        AvlNode node = null;
        AvlTree instance = new AvlTree();
        instance.setNode(node);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of RotateLeft method, of class AvlTree.
     */
    @Test
    public void testRotateLeft_0args() {
        System.out.println("RotateLeft");
        AvlTree instance = new AvlTree();
        AvlNode expResult = null;
        AvlNode result = instance.RotateLeft();
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of RotateRight method, of class AvlTree.
     */
    @Test
    public void testRotateRight_0args() {
        System.out.println("RotateRight");
        AvlTree instance = new AvlTree();
        AvlNode expResult = null;
        AvlNode result = instance.RotateRight();
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of isBalanced method, of class AvlTree.
     */
    @Test
    public void testIsBalanced_0args() {
        System.out.println("isBalanced");
        AvlTree instance = new AvlTree();
        int expResult = 0;
        int result = instance.isBalanced();
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of RotateRight method, of class AvlTree.
     */
    @Test
    public void testRotateRight_AvlNode() {
        System.out.println("RotateRight");
        AvlNode node = null;
        AvlTree instance = new AvlTree();
        AvlNode expResult = null;
        AvlNode result = instance.RotateRight(node);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of RotateLeft method, of class AvlTree.
     */
    @Test
    public void testRotateLeft_AvlNode() {
        System.out.println("RotateLeft");
        AvlNode node = null;
        AvlTree instance = new AvlTree();
        AvlNode expResult = null;
        AvlNode result = instance.RotateLeft(node);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of AvlHeight method, of class AvlTree.
     */
    @Test
    public void testAvlHeight() {
        System.out.println("AvlHeight");
        AvlNode node = null;
        AvlTree instance = new AvlTree();
        int expResult = 0;
        int result = instance.AvlHeight(node);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of isBalanced method, of class AvlTree.
     */
    @Test
    public void testIsBalanced_AvlNode() {
        System.out.println("isBalanced");
        AvlNode node = null;
        AvlTree instance = new AvlTree();
        int expResult = 0;
        int result = instance.isBalanced(node);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of findMinimum method, of class AvlTree.
     */
    @Test
    public void testFindMinimum() {
        System.out.println("findMinimum");
        AvlNode node = null;
        AvlTree instance = new AvlTree();
        AvlNode expResult = null;
        AvlNode result = instance.findMinimum(node);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of deleteMinimum method, of class AvlTree.
     */
    @Test
    public void testDeleteMinimum() {
        System.out.println("deleteMinimum");
        AvlNode node = null;
        AvlTree instance = new AvlTree();
        AvlNode expResult = null;
        AvlNode result = instance.deleteMinimum(node);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of insertIntoAVL method, of class AvlTree.
     */
    @Test
    public void testInsertIntoAVL_AvlNode_AvlNode() {
        System.out.println("insertIntoAVL");
        AvlNode node = null;
        AvlNode toInsert = null;
        AvlTree instance = new AvlTree();
        AvlNode expResult = null;
        AvlNode result = instance.insertIntoAVL(node, toInsert);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of insertIntoAVL method, of class AvlTree.
     */
    @Test
    public void testInsertIntoAVL_KeyValue() {
        System.out.println("insertIntoAVL");
        KeyValue key = null;
        AvlTree instance = new AvlTree();
        AvlNode expResult = null;
        AvlNode result = instance.insertIntoAVL(key);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of deleteKeyFromTree method, of class AvlTree.
     */
    @Test
    public void testDeleteKeyFromTree() {
        System.out.println("deleteKeyFromTree");
        int key = 0;
        AvlTree instance = new AvlTree();
        AvlNode expResult = null;
        AvlNode result = instance.deleteKeyFromTree(key);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of deleteNodeFromTree method, of class AvlTree.
     */
    @Test
    public void testDeleteNodeFromTree() {
        System.out.println("deleteNodeFromTree");
        int toDelete = 0;
        AvlNode node = null;
        AvlTree instance = new AvlTree();
        AvlNode expResult = null;
        AvlNode result = instance.deleteNodeFromTree(toDelete, node);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of main method, of class AvlTree.
     */
    @Test
    public void testMain() {
        System.out.println("main");
        String[] args = null;
        AvlTree.main(args);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }
    
}
